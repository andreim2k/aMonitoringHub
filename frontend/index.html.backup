<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>@WeatherStation - Real-time Weather Monitoring</title>

  <!-- Chart.js 2.x for better Safari compatibility -->
  <script src="https://cdn.jsdelivr.net/npm/chart.js@2.9.4/dist/Chart.min.js"></script>

  <style>
    /* Simple inline styles - no external dependencies */
    body {
      margin: 0;
      padding: 0;
      font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
      background: linear-gradient(135deg, #0f0c29 0%, #302b63 50%, #24243e 100%);
      color: white;
      min-height: 100vh;
    }

    .container {
      max-width: 1400px;
      margin: 0 auto;
      padding: 20px;
    }

    .card {
      background: linear-gradient(135deg, rgba(20, 18, 35, 0.95) 0%, rgba(35, 30, 70, 0.9) 50%, rgba(25, 25, 45, 0.95) 100%);
      backdrop-filter: blur(10px);
      border-radius: 16px;
      padding: 20px;
      margin: 20px 0;
      border: 1px solid rgba(255, 255, 255, 0.1);
      box-shadow: 0 8px 32px rgba(31, 38, 135, 0.37);
    }

    .stats-grid {
      display: grid;
      grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
      gap: 20px;
      margin: 20px 0;
    }

    .charts-grid {
      display: grid;
      grid-template-columns: 1fr 1fr;
      gap: 20px;
      margin: 20px 0;
    }

    @media (max-width: 768px) {
      .charts-grid {
        grid-template-columns: 1fr;
      }
    }

    .stat-card {
      background: linear-gradient(135deg, rgba(20, 18, 35, 0.95) 0%, rgba(35, 30, 70, 0.9) 50%, rgba(25, 25, 45, 0.95) 100%);
      backdrop-filter: blur(10px);
      border-radius: 12px;
      padding: 20px;
      border: 1px solid rgba(255, 255, 255, 0.1);
      text-align: center;
    }

    .stat-value {
      font-size: 2.5rem;
      font-weight: bold;
      color: #90caf9;
      margin: 10px 0;
    }

    .stat-label {
      font-size: 0.9rem;
      color: #b3b3b3;
      margin-bottom: 5px;
    }

    .stat-subtitle {
      font-size: 0.8rem;
      color: #888;
    }

    .status-indicator {
      display: inline-block;
      width: 10px;
      height: 10px;
      border-radius: 50%;
      margin-right: 8px;
    }

    .metric-value.status-online { color: #4caf50 !important; }
    .status-offline { color: #f44336; }
    .status-connecting {
      color: #ffa726;
      animation: pulse 1.5s infinite;
    }

    @keyframes pulse {
      0%, 100% { opacity: 1; }
      50% { opacity: 0.5; }
    }

    .header {
      background: rgba(0, 0, 0, 0.3);
      padding: 20px;
      text-align: center;
      border-bottom: 1px solid rgba(255, 255, 255, 0.1);
    }

    .temperature-display {
      font-size: 4rem;
      font-weight: bold;
      color: #90caf9;
      text-align: center;
      margin: 30px 0;
    }

    .error {
      background: rgba(244, 67, 54, 0.2);
      border: 1px solid rgba(244, 67, 54, 0.5);
      padding: 15px;
      border-radius: 8px;
      margin: 20px 0;
    }

    .loading {
      text-align: center;
      padding: 40px;
      font-size: 1.2rem;
      color: #b3b3b3;
    }

    .btn {
      background: linear-gradient(135deg, #90caf9 0%, #64b5f6 100%);
      color: #000;
      border: none;
      padding: 12px 24px;
      border-radius: 8px;
      cursor: pointer;
      font-weight: 500;
      margin: 5px;
    }

    .btn:hover {
      background: linear-gradient(135deg, #64b5f6 0%, #42a5f5 100%);
      transform: translateY(-1px);
    }

    .chart-container {
      position: relative;
      height: 300px;
      background: rgba(0, 0, 0, 0.2);
      border-radius: 8px;
      padding: 10px;
    }

    /* Row-based Layout Styles */
    .metrics-row, .charts-row {
      display: flex;
      gap: 20px;
      margin-bottom: 20px;
      flex-wrap: wrap;
    }

    .metrics-row {
      justify-content: center;
    }

    .charts-row {
      justify-content: space-between;
    }

    .stats-row {
      justify-content: space-around;
    }

    .metric-card {
      background: rgba(255, 255, 255, 0.05);
      border: 1px solid rgba(255, 255, 255, 0.1);
      border-radius: 12px;
      padding: 20px;
      text-align: center;
      min-width: 140px;
      flex: 1;
      max-width: 200px;
    }

    .stat-card {
      min-width: 120px;
      max-width: 150px;
    }

    .temperature-card {
      border-left: 4px solid #90caf9;
    }

    .humidity-card {
      border-left: 4px solid #ff9800;
    }

    .chart-card {
      background: rgba(255, 255, 255, 0.05);
      border: 1px solid rgba(255, 255, 255, 0.1);
      border-radius: 12px;
      padding: 20px;
      flex: 1;
      min-width: 300px;
    }

    .chart-card h3 {
      margin: 0 0 15px 0;
      color: #e0e0e0;
      font-size: 1.1rem;
      text-align: center;
    }

    .metric-icon {
      font-size: 2rem;
      margin-bottom: 8px;
    }

    .metric-label {
      font-size: 0.9rem;
      color: #b3b3b3;
      margin-bottom: 5px;
    }

    .metric-value {
      font-size: 1.5rem;
      font-weight: bold;
      color: #ffffff;
      margin-bottom: 3px;
    }

    .metric-timestamp {
      font-size: 0.7rem;
      color: #888;
    }

    /* Responsive adjustments */
    @media (max-width: 768px) {
      .metrics-row:nth-child(n+3), .charts-row {
        flex-direction: column;
        gap: 15px;
      }

      .stats-row {
        display: grid;
        grid-template-columns: 1fr 1fr;
        gap: 15px;
      }

      .metric-card, .chart-card {
        max-width: none;
        min-width: auto;
      }
    }

    @media (max-width: 300px) {
      .stats-row {
        grid-template-columns: 1fr;
      }
    }

    .chart-header {
      display: flex;
      justify-content: space-between;
      align-items: center;
      margin-bottom: 15px;
    }

    .chart-title {
      font-size: 1.2rem;
      font-weight: bold;
      color: #90caf9;
    }

    .humidity-display {
      font-size: 2.8rem;
      font-weight: bold;
      color: #81c784;
      text-align: center;
      margin: 15px 0;
    }

    .weather-metrics {
      display: flex;
      gap: 20px;
      justify-content: center;
      flex-wrap: wrap;
    }

    .weather-metrics .card {
      flex: 1;
      min-width: 250px;
      max-width: 350px;
    }

    </style>
</head>

<body>
  <div class="header">
    <h1>@WeatherStation</h1>
    <p style="font-style: italic; color: #888; font-size: 0.9em;">Real-time weather monitoring</p>
    <div>
      <span class="status-indicator status-connecting" id="connectionIndicator"></span>
      <span id="connectionStatus">Connecting...</span>
    </div>
  </div>

  <div class="container">
      <!-- Row 1: Sensors Status & Data Points -->
      <div class="metrics-row">
        <div class="metric-card">
          <div class="metric-icon">üì°</div>
          <div class="metric-label">Sensors Status</div>
          <div class="metric-value status-offline" id="sensorStatus">Offline</div>
        </div>
        <div class="metric-card">
          <div class="metric-icon">üìä</div>
          <div class="metric-label">Data Points</div>
          <div class="metric-value" id="dataCount">--</div>
        </div>
      </div>

      <!-- Row 2: Current Temperature & Humidity -->
      <div class="metrics-row">
        <div class="metric-card temperature-card">
          <div class="metric-icon">üå°Ô∏è</div>
          <div class="metric-label">Temperature</div>
          <div class="metric-value" id="currentTemp">--¬∞C</div>
          <div class="metric-timestamp" id="tempTimestamp">--</div>
        </div>
        <div class="metric-card humidity-card">
          <div class="metric-icon">üíß</div>
          <div class="metric-label">Humidity</div>
          <div class="metric-value" id="currentHumidity">--%</div>
          <div class="metric-timestamp" id="humidityTimestamp">--</div>
        </div>
      </div>

      <!-- Row 3: Min/Max Statistics -->
      <div class="metrics-row stats-row">
        <div class="metric-card stat-card">
          <div class="metric-icon">ü•∂</div>
          <div class="metric-label">Min Temperature</div>
          <div class="metric-value" id="minTemp">--¬∞C</div>
        </div>
        <div class="metric-card stat-card">
          <div class="metric-icon">üí®</div>
          <div class="metric-label">Min Humidity</div>
          <div class="metric-value" id="minHumidity">--%</div>
        </div>
        <div class="metric-card stat-card">
          <div class="metric-icon">ü•µ</div>
          <div class="metric-label">Max Temperature</div>
          <div class="metric-value" id="maxTemp">--¬∞C</div>
        </div>
        <div class="metric-card stat-card">
          <div class="metric-icon">üí¶</div>
          <div class="metric-label">Max Humidity</div>
          <div class="metric-value" id="maxHumidity">--%</div>
        </div>
      </div>

      <!-- Row 4: Temperature Charts -->
      <div class="charts-row">
        <div class="chart-card">
          <h3>üå°Ô∏è Real-time Temperature</h3>
          <div class="chart-container">
            <canvas id="realtimeChart"></canvas>
          </div>
        </div>
        <div class="chart-card">
          <h3>üìà Temperature History</h3>
          <div class="chart-container">
            <canvas id="historyChart"></canvas>
          </div>
        </div>
      </div>

      <!-- Row 5: Humidity Charts -->
      <div class="charts-row">
        <div class="chart-card">
          <h3>üíß Real-time Humidity</h3>
          <div class="chart-container">
            <canvas id="realtimeHumidityChart"></canvas>
          </div>
        </div>
        <div class="chart-card">
          <h3>üìä Humidity History</h3>
          <div class="chart-container">
            <canvas id="historyHumidityChart"></canvas>
          </div>
        </div>
      </div>
    </div>

    <!-- Error Display -->
    <div id="errorDisplay" style="display: none;"></div>

    <!-- Loading Display -->
    <div id="loadingDisplay" class="loading" style="display: none;">
      Loading temperature data...
    </div>

    <!-- Footer -->
    <footer style="text-align: center; padding-top: 0p; color: #888; font-size: 0.8rem; margin-top: 0px;">
      <p>@WeatherStation &copy; 2025. All rights reserved.</p>
    </footer>
  </div>

  <script>
    // Global state
    let currentData = {
      temperature: null,
      humidity: null,
      timestamp: null,
      humidityTimestamp: null,
      sensorType: null,
      stats: { minimum: null, maximum: null, average: null, count: 0 },
      humidityStats: { minimum: null, maximum: null, average: null, count: 0 },
      history: [],
      humidityHistory: [],
      connected: false
    };

    let eventSource = null;
    let realtimeChart = null;
    let historyChart = null;
    let realtimeHumidityChart = null;
    let historyHumidityChart = null;

    // Utility functions
    function formatTemperature(value) {
      if (value === null || value === undefined) return '--¬∞C';
      return parseFloat(value).toFixed(1) + '¬∞C';
    }

    function formatHumidity(value) {
      if (value === null || value === undefined) return '--%';
      return parseFloat(value).toFixed(1) + '%';
    }

    function formatTimestamp(timestamp) {
      if (!timestamp) return 'No data';
      const date = new Date(timestamp);
      return date.toLocaleString();
    }

    function showError(message) {
      const errorDiv = document.getElementById('errorDisplay');
      errorDiv.innerHTML = '<div class="error"><strong>Error:</strong> ' + message + '</div>';
      errorDiv.style.display = 'block';
      setTimeout(function() {
        errorDiv.style.display = 'none';
      }, 5000);
    }

    function updateConnectionStatus(status, text) {
      const indicator = document.getElementById('connectionIndicator');
      const statusText = document.getElementById('connectionStatus');

      indicator.className = 'status-indicator status-' + status;
      statusText.textContent = text;
      currentData.connected = (status === 'online');
    }

    function updateDisplay() {
      console.log('Updating display with currentData:', currentData);

      // Update main temperature display
      document.getElementById('currentTemp').textContent = formatTemperature(currentData.temperature);
      document.getElementById('tempTimestamp').textContent = formatTimestamp(currentData.timestamp);

      // Update main humidity display
      document.getElementById('currentHumidity').textContent = formatHumidity(currentData.humidity);
      document.getElementById('humidityTimestamp').textContent = formatTimestamp(currentData.humidityTimestamp);

      // Update sensor status
      const sensorStatusEl = document.getElementById('sensorStatus');

      // Sensor status should only be Online when connected AND data received
      if (currentData.connected && (currentData.temperature !== null || currentData.humidity !== null)) {
        sensorStatusEl.textContent = 'Online';
        sensorStatusEl.className = 'metric-value status-online';
      } else {
        sensorStatusEl.textContent = 'Offline';
        sensorStatusEl.className = 'metric-value status-offline';
      }

      // Update stats
      document.getElementById('minTemp').textContent = formatTemperature(currentData.stats.minimum);
      document.getElementById('maxTemp').textContent = formatTemperature(currentData.stats.maximum);
      document.getElementById('dataCount').textContent = currentData.stats.count || 0;

      // Update humidity stats
      document.getElementById('minHumidity').textContent = formatHumidity(currentData.humidityStats.minimum);
      document.getElementById('maxHumidity').textContent = formatHumidity(currentData.humidityStats.maximum);
    }

    function initCharts() {
      // Real-time Chart
      const realtimeCtx = document.getElementById('realtimeChart').getContext('2d');
      realtimeChart = new Chart(realtimeCtx, {
        type: 'line',
        data: {
          labels: [],
          datasets: [{
            label: 'Temperature (¬∞C)',
            data: [],
            borderColor: '#90caf9',
            backgroundColor: 'rgba(144, 202, 249, 0.1)',
            borderWidth: 2,
            fill: true,
            pointBackgroundColor: '#90caf9',
            pointBorderColor: '#42a5f5',
            pointRadius: 4,
            pointHoverRadius: 6
          }]
        },
        options: {
          responsive: true,
          maintainAspectRatio: false,
          legend: { display: false },
          scales: {
            xAxes: [{
              gridLines: { color: 'rgba(255,255,255,0.1)' },
              ticks: { fontColor: '#b3b3b3', maxTicksLimit: 8 }
            }],
            yAxes: [{
              gridLines: { color: 'rgba(255,255,255,0.1)' },
              ticks: { fontColor: '#b3b3b3' }
            }]
          },
          animation: { duration: 300 }
        }
      });

      // History Chart
      const historyCtx = document.getElementById('historyChart').getContext('2d');
      historyChart = new Chart(historyCtx, {
        type: 'line',
        data: {
          labels: [],
          datasets: [{
            label: 'Temperature History (¬∞C)',
            data: [],
            borderColor: '#66bb6a',
            backgroundColor: 'rgba(102, 187, 106, 0.1)',
            borderWidth: 2,
            fill: true,
            pointRadius: 2,
            pointBackgroundColor: '#66bb6a',
            pointBorderColor: '#388e3c'
          }]
        },
        options: {
          responsive: true,
          maintainAspectRatio: false,
          legend: { display: false },
          scales: {
            xAxes: [{
              gridLines: { color: 'rgba(255,255,255,0.1)' },
              ticks: { fontColor: '#b3b3b3', maxTicksLimit: 10 }
            }],
            yAxes: [{
              gridLines: { color: 'rgba(255,255,255,0.1)' },
              ticks: { fontColor: '#b3b3b3' }
            }]
          }
        }
      });

      // Real-time Humidity Chart
      const realtimeHumidityCtx = document.getElementById('realtimeHumidityChart').getContext('2d');
      realtimeHumidityChart = new Chart(realtimeHumidityCtx, {
        type: 'line',
        data: {
          labels: [],
          datasets: [{
            label: 'Humidity (%)',
            data: [],
            borderColor: '#ff9800',
            backgroundColor: 'rgba(255, 152, 0, 0.1)',
            borderWidth: 2,
            fill: true,
            pointBackgroundColor: '#ff9800',
            pointBorderColor: '#f57c00',
            pointRadius: 4,
            pointHoverRadius: 6
          }]
        },
        options: {
          responsive: true,
          maintainAspectRatio: false,
          legend: { display: false },
          scales: {
            xAxes: [{
              gridLines: { color: 'rgba(255,255,255,0.1)' },
              ticks: { fontColor: '#b3b3b3', maxTicksLimit: 8 }
            }],
            yAxes: [{
              gridLines: { color: 'rgba(255,255,255,0.1)' },
              ticks: { fontColor: '#b3b3b3', min: 0, max: 100 }
            }]
          },
          animation: { duration: 300 }
        }
      });

      // History Humidity Chart
      const historyHumidityCtx = document.getElementById('historyHumidityChart').getContext('2d');
      historyHumidityChart = new Chart(historyHumidityCtx, {
        type: 'line',
        data: {
          labels: [],
          datasets: [{
            label: 'Humidity History (%)',
            data: [],
            borderColor: '#9c27b0',
            backgroundColor: 'rgba(156, 39, 176, 0.1)',
            borderWidth: 2,
            fill: true,
            pointRadius: 2,
            pointBackgroundColor: '#9c27b0',
            pointBorderColor: '#7b1fa2'
          }]
        },
        options: {
          responsive: true,
          maintainAspectRatio: false,
          legend: { display: false },
          scales: {
            xAxes: [{
              gridLines: { color: 'rgba(255,255,255,0.1)' },
              ticks: { fontColor: '#b3b3b3', maxTicksLimit: 10 }
            }],
            yAxes: [{
              gridLines: { color: 'rgba(255,255,255,0.1)' },
              ticks: { fontColor: '#b3b3b3', min: 0, max: 100 }
            }]
          }
        }
      });
    }

    function updateRealtimeChart(reading) {
      if (!realtimeChart) return;

      const timestamp = new Date(reading.timestamp);
      const timeLabel = timestamp.toLocaleTimeString();

      // Keep only last 20 points
      if (realtimeChart.data.labels.length >= 20) {
        realtimeChart.data.labels.shift();
        realtimeChart.data.datasets[0].data.shift();
      }

      realtimeChart.data.labels.push(timeLabel);
      realtimeChart.data.datasets[0].data.push(reading.temperatureC);
      realtimeChart.update(0); // 0 duration for smooth real-time updates
    }

    function updateHistoryChart() {
      if (!historyChart || currentData.history.length === 0) return;

      const sortedHistory = currentData.history.slice().sort(function(a, b) {
        return new Date(a.timestamp) - new Date(b.timestamp);
      });

      historyChart.data.labels = sortedHistory.map(function(item) {
        const date = new Date(item.timestamp);
        return date.toLocaleString();
      });

      historyChart.data.datasets[0].data = sortedHistory.map(function(item) {
        return item.temperatureC;
      });

      historyChart.update();
    }

    function updateRealtimeHumidityChart(reading) {
      if (!realtimeHumidityChart) return;

      const timestamp = new Date(reading.timestamp);
      const timeLabel = timestamp.toLocaleTimeString();

      // Keep only last 20 points
      if (realtimeHumidityChart.data.labels.length >= 20) {
        realtimeHumidityChart.data.labels.shift();
        realtimeHumidityChart.data.datasets[0].data.shift();
      }

      realtimeHumidityChart.data.labels.push(timeLabel);
      realtimeHumidityChart.data.datasets[0].data.push(reading.humidityPercent);
      realtimeHumidityChart.update(0); // 0 duration for smooth real-time updates
    }

    function updateHumidityHistoryChart() {
      if (!historyHumidityChart || currentData.humidityHistory.length === 0) return;

      const sortedHistory = currentData.humidityHistory.slice().sort(function(a, b) {
        return new Date(a.timestamp) - new Date(b.timestamp);
      });

      historyHumidityChart.data.labels = sortedHistory.map(function(item) {
        const date = new Date(item.timestamp);
        return date.toLocaleString();
      });

      historyHumidityChart.data.datasets[0].data = sortedHistory.map(function(item) {
        return item.humidityPercent;
      });

      historyHumidityChart.update();
    }

    async function graphqlQuery(query) {
      console.log('GraphQL Query:', query);
      try {
        const response = await fetch('/graphql', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ query: query })
        });

        console.log('GraphQL Response status:', response.status, response.statusText);

        if (!response.ok) {
          throw new Error('HTTP ' + response.status + ': ' + response.statusText);
        }

        const result = await response.json();
        console.log('GraphQL Response data:', result);

        if (result.errors && result.errors.length > 0) {
          console.error('GraphQL Errors:', result.errors);
          throw new Error('GraphQL Error: ' + result.errors.map(e => e.message).join(', '));
        }

        return result;

      } catch (error) {
        console.error('GraphQL query error:', error);
        throw new Error('Query failed: ' + error.message);
      }
    }

    async function fetchInitialData() {
      console.log('Fetching initial data...');
      try {
        // Fetch current temperature
        console.log('Fetching current temperature...');
        const currentResponse = await graphqlQuery('{ currentTemperature { temperatureC timestamp sensorType sensorId } }');

        if (currentResponse.data && currentResponse.data.currentTemperature) {
          const temp = currentResponse.data.currentTemperature;
          currentData.temperature = temp.temperatureC;
          currentData.timestamp = temp.timestamp;
          currentData.sensorType = temp.sensorType;
          console.log('Current temperature loaded:', temp);
        } else {
          console.log('No current temperature data available');
        }

        // Fetch current humidity
        console.log('Fetching current humidity...');
        const humidityResponse = await graphqlQuery('{ currentHumidity { humidityPercent timestamp } }');

        if (humidityResponse.data && humidityResponse.data.currentHumidity) {
          const humidity = humidityResponse.data.currentHumidity;
          currentData.humidity = humidity.humidityPercent;
          currentData.humidityTimestamp = humidity.timestamp;
          console.log('Current humidity loaded:', humidity);
        } else {
          console.log('No current humidity data available');
        }

        // Fetch stats
        console.log('Fetching temperature statistics...');
        const statsResponse = await graphqlQuery('{ temperatureStatistics { count average minimum maximum } }');

        if (statsResponse.data && statsResponse.data.temperatureStatistics) {
          currentData.stats = statsResponse.data.temperatureStatistics;
          console.log('Temperature stats loaded:', currentData.stats);
        }

        // Fetch humidity stats
        console.log('Fetching humidity statistics...');
        const humidityStatsResponse = await graphqlQuery('{ humidityStatistics { count average minimum maximum } }');

        if (humidityStatsResponse.data && humidityStatsResponse.data.humidityStatistics) {
          currentData.humidityStats = humidityStatsResponse.data.humidityStatistics;
          console.log('Humidity stats loaded:', currentData.humidityStats);
        }

        // Fetch history
        console.log('Fetching temperature history...');
        const historyResponse = await graphqlQuery('{ temperatureHistory(limit: 50) { temperatureC timestamp sensorId } }');

        if (historyResponse.data && historyResponse.data.temperatureHistory) {
          currentData.history = historyResponse.data.temperatureHistory;
          console.log('Temperature history loaded:', currentData.history.length, 'points');
          updateHistoryChart();
        }

        // Fetch humidity history
        console.log('Fetching humidity history...');
        const humidityHistoryResponse = await graphqlQuery('{ humidityHistory(limit: 50) { humidityPercent timestamp sensorId } }');

        if (humidityHistoryResponse.data && humidityHistoryResponse.data.humidityHistory) {
          currentData.humidityHistory = humidityHistoryResponse.data.humidityHistory;
          console.log('Humidity history loaded:', currentData.humidityHistory.length, 'points');
          updateHumidityHistoryChart();
        }

        // Initialize real-time chart with recent data
        if (currentData.history.length > 0) {
          const recentPoints = currentData.history.slice(-10);
          recentPoints.forEach(function(reading) {
            updateRealtimeChart(reading);
          });
        }

        // Initialize humidity charts with recent data
        if (currentData.humidityHistory.length > 0) {
          const recentHumidityPoints = currentData.humidityHistory.slice(-10);
          recentHumidityPoints.forEach(function(reading) {
            updateRealtimeHumidityChart(reading);
          });
        }

        console.log('Initial data fetch complete, updating display...');
        updateDisplay();

      } catch (error) {
        console.error('Failed to fetch initial data:', error);
        console.error('Error details:', error.message);
        showError('Failed to load initial data: ' + error.message);
      }
    }

    function connectSSE() {
      console.log('Connecting to SSE...');
      if (eventSource) {
        eventSource.close();
      }

      updateConnectionStatus('connecting', 'Connecting...');

      try {
        eventSource = new EventSource('/events');

        eventSource.onopen = function() {
          console.log('SSE connection opened');
          updateConnectionStatus('online', 'Connected');
          updateDisplay(); // Update display when connection is established
        };

        eventSource.onmessage = function(event) {
          console.log('SSE message received:', event.data);
          try {
            const data = JSON.parse(event.data);

            if (data.type === 'temperature_update' && data.data) {
              const tempData = data.data;
              console.log('Temperature update:', tempData);

              // Update current data
              currentData.temperature = tempData.temperature_c;
              currentData.timestamp = tempData.timestamp_iso;
              currentData.sensorType = tempData.sensor_type;

              // Update simple stats
              if (!currentData.stats.minimum || tempData.temperature_c < currentData.stats.minimum) {
                currentData.stats.minimum = tempData.temperature_c;
              }
              if (!currentData.stats.maximum || tempData.temperature_c > currentData.stats.maximum) {
                currentData.stats.maximum = tempData.temperature_c;
              }
              currentData.stats.count++;

              // Create reading object for charts
              const reading = {
                temperatureC: tempData.temperature_c,
                timestamp: tempData.timestamp_iso,
                sensorId: tempData.sensor_id
              };

              // Add to history (keep last 50)
              currentData.history.push(reading);
              if (currentData.history.length > 50) {
                currentData.history = currentData.history.slice(-50);
              }

              // Update display and charts
              updateRealtimeChart(reading);
              updateDisplay();

            } else if (data.type === 'humidity_update' && data.data) {
              const humidityData = data.data;
              console.log('Humidity update:', humidityData);

              // Update current humidity data
              currentData.humidity = humidityData.humidity_percent;
              currentData.humidityTimestamp = humidityData.timestamp_iso;

              // Update simple humidity stats
              if (!currentData.humidityStats.minimum || humidityData.humidity_percent < currentData.humidityStats.minimum) {
                currentData.humidityStats.minimum = humidityData.humidity_percent;
              }
              if (!currentData.humidityStats.maximum || humidityData.humidity_percent > currentData.humidityStats.maximum) {
                currentData.humidityStats.maximum = humidityData.humidity_percent;
              }
              currentData.humidityStats.count++;

              // Create reading object for charts
              const reading = {
                humidityPercent: humidityData.humidity_percent,
                timestamp: humidityData.timestamp_iso,
                sensorId: humidityData.sensor_id
              };

              // Add to history (keep last 50)
              currentData.humidityHistory.push(reading);
              if (currentData.humidityHistory.length > 50) {
                currentData.humidityHistory = currentData.humidityHistory.slice(-50);
              }

              // Update display and charts
              updateRealtimeHumidityChart(reading);
              updateDisplay();
            }

          } catch (error) {
            console.error('Error parsing SSE data:', error);
          }
        };

        eventSource.onerror = function(error) {
          console.error('SSE error:', error);
          console.log('SSE readyState:', eventSource.readyState);
          updateConnectionStatus('offline', 'Disconnected');
          updateDisplay(); // Update display when disconnected

          // Attempt to reconnect after 3 seconds
          setTimeout(function() {
            if (eventSource.readyState === EventSource.CLOSED) {
              console.log('Attempting to reconnect SSE...');
              connectSSE();
            }
          }, 3000);
        };

      } catch (error) {
        console.error('Failed to create SSE connection:', error);
        updateConnectionStatus('offline', 'Connection failed');
        updateDisplay();
      }
    }

    // Initialize the application
    async function initialize() {
      console.log('Initializing application...');
      try {
        // Initialize charts first
        initCharts();

        // Then fetch data and connect SSE
        await fetchInitialData();
        connectSSE();

      } catch (error) {
        console.error('Initialization failed:', error);
        showError('Application initialization failed: ' + error.message);
      }
    }

    // Start the application when page loads
    document.addEventListener('DOMContentLoaded', initialize);
  </script>
</body>
</html>
